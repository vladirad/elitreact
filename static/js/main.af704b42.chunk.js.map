{"version":3,"sources":["components/getData.js","components/header.js","components/footer.js","components/postList.js","App.js","serviceWorker.js","index.js"],"names":["getOptions","header","state","options","optionsUrl","fetch","then","data","json","setState","sitelogo","this","acf","site_logo","className","src","href","Component","footer","copyright","PostList","posts","postUrl","listposts","map","post","index","key","featured_image_url","title","rendered","dangerouslySetInnerHTML","__html","content","link","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6OAIaA,EAAa,4DCoCTC,E,2MApCbC,MAAQ,CACJC,QAAS,I,mFAGQ,IAAD,OACdC,EAAU,UAAMJ,GACpBK,MAAMD,GACLE,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACJ,EAAKE,SAAS,CACZN,QAASI,S,+BAOb,IAAIG,EAAW,KAMf,MAJsC,qBAA5BC,KAAKT,MAAMC,QAAQS,MAC3BF,EAAWC,KAAKT,MAAMC,QAAQS,IAAIC,WAInC,gCACA,yBAAKC,UAAU,QACd,yBAAKC,IAAKL,KAEX,6BACC,uBAAGM,KAAK,8BAAR,yB,GA9BaC,aCgCJC,E,2MA/BbhB,MAAQ,CACJC,QAAS,I,mFAGQ,IAAD,OACdC,EAAU,UAAMJ,GACpBK,MAAMD,GACLE,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACJ,EAAKE,SAAS,CACZN,QAASI,S,+BAOb,IAAIY,EAAY,KAMhB,MAJsC,qBAA5BR,KAAKT,MAAMC,QAAQS,MAC3BO,EAAYR,KAAKT,MAAMC,QAAQS,IAAIO,WAIpC,gCACA,2BAAIA,Q,GA1BUF,aCuCFG,E,2MArCflB,MAAQ,CACJmB,MAAO,I,mFAGU,IAAD,OACdC,EAAO,UHRO,kDGSlBjB,MAAMiB,GACLhB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACJ,EAAKE,SAAS,CACZY,MAAOd,S,+BAMT,IAAIgB,EAAYZ,KAAKT,MAAMmB,MAAMG,KAAI,SAACC,EAAMC,GAC1C,OACE,yBAAKZ,UAAU,OAAOa,IAAKD,GACzB,yBAAKX,IAAKU,EAAKG,qBACf,4BAAKH,EAAKI,MAAMC,UAChB,uBAAGC,wBAAyB,CAACC,OAAQP,EAAKQ,QAAQH,YAClD,uBAAGd,KAAMS,EAAKS,KAAMC,OAAO,UAA3B,mBAMN,OACE,yBAAKrB,UAAU,SACb,qCACCS,O,GAhCUN,aCYRmB,MAVf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,iB","file":"static/js/main.af704b42.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const getPosts = 'https://elit.devstetic.dev/wp-json/wp/v2/posts';\r\nexport const getPages = 'https://elit.devstetic.dev/wp-json/wp/v2/pages';\r\nexport const getOptions = 'https://elit.devstetic.dev/wp-json/acf/v3/options/options';\r\n\r\n\r\n//export const getPosts = '${appUrl}posts';\r\n","import React, {Component} from 'react'\r\nimport {getOptions} from './getData'\r\n\r\nclass header extends Component {\r\n    state = {\r\n        options: []\r\n    }\r\n    \r\n    componentDidMount() {\r\n      let optionsUrl = `${getOptions}`;\r\n      fetch(optionsUrl)\r\n      .then(data => data.json())\r\n      .then(data => {\r\n        this.setState({\r\n          options: data\r\n        })\r\n      })\r\n    }\r\n\r\n    render() {\r\n    \r\n      let sitelogo = null;\r\n    \r\n      if(typeof(this.state.options.acf) !== 'undefined') {\r\n        sitelogo = this.state.options.acf.site_logo;\r\n      }\r\n      \r\n      return (\r\n       <header>\r\n       <div className=\"logo\">\r\n        <img src={sitelogo} />\r\n       </div>\r\n       <nav>\r\n        <a href=\"https://elit.devstetic.dev\">Go to real site</a>\r\n       </nav>\r\n       </header>\r\n      );\r\n    }\r\n  }\r\n    \r\n  export default header;","import React, {Component} from 'react'\r\nimport {getOptions} from './getData'\r\n\r\nclass footer extends Component {\r\n    state = {\r\n        options: []\r\n    }\r\n    \r\n    componentDidMount() {\r\n      let optionsUrl = `${getOptions}`;\r\n      fetch(optionsUrl)\r\n      .then(data => data.json())\r\n      .then(data => {\r\n        this.setState({\r\n          options: data\r\n        })\r\n      })\r\n    }\r\n\r\n    render() {\r\n    \r\n      let copyright = null;\r\n    \r\n      if(typeof(this.state.options.acf) !== 'undefined') {\r\n        copyright = this.state.options.acf.copyright;\r\n      }\r\n      \r\n      return (\r\n       <footer>\r\n       <p>{copyright}</p>\r\n       </footer>\r\n      );\r\n    }\r\n  }\r\n    \r\n  export default footer;","  \r\nimport React, {Component} from 'react'\r\nimport {getPosts} from './getData'\r\n\r\nclass PostList extends Component {\r\n    state = {\r\n        posts: []\r\n    }\r\n    \r\n    componentDidMount() {\r\n      let postUrl = `${getPosts}`;\r\n      fetch(postUrl)\r\n      .then(data => data.json())\r\n      .then(data => {\r\n        this.setState({\r\n          posts: data\r\n        })\r\n      })\r\n    }\r\n    \r\n      render() {\r\n        let listposts = this.state.posts.map((post, index) => {\r\n          return(\r\n            <div className=\"Post\" key={index}>\r\n              <img src={post.featured_image_url} />\r\n              <h4>{post.title.rendered}</h4>\r\n              <p dangerouslySetInnerHTML={{__html: post.content.rendered}}/> \r\n              <a href={post.link} target=\"_blank\">Read More ></a>\r\n              {/* dangerouslySetInnerHTML eliminates the html tags */}\r\n            </div>\r\n          )\r\n        })\r\n    \r\n        return (\r\n          <div className=\"Posts\">\r\n            <h2>Posts</h2>\r\n            {listposts}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    \r\n    export default PostList;","import React from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport PostList from './components/postList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <PostList/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}